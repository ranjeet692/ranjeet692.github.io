AWSTemplateFormatVersion: '2010-09-09'
Description: >
  FastAPI + ReactJS Application Stack with API Gateway, Cognito, ECS Fargate,
  ALB, VPC Endpoints, and optional RDS/ElastiCache/Bedrock.
  Optimized for development with cost-efficient single-AZ deployment.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
          - Owner
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnetCIDR
          - PrivateSubnetCIDR
          - AvailabilityZone
      - Label:
          default: "ECS Configuration"
        Parameters:
          - BackendCPU
          - BackendMemory
          - AnalyticsCPU
          - AnalyticsMemory
          - BackendDesiredCount
          - AnalyticsDesiredCount
      - Label:
          default: "Optional Services"
        Parameters:
          - EnableRDS
          - EnableElastiCache
          - EnableBedrock
          - EnableDevUser
      - Label:
          default: "Database Configuration"
        Parameters:
          - DBInstanceClass
          - DBName
          - DBUsername
      - Label:
          default: "Domain & SSL"
        Parameters:
          - CustomDomainName
          - ACMCertificateArn
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"

  Notes:
    CostOptimization: |
      - Single AZ deployment reduces costs but eliminates high availability
      - RDS and ElastiCache are optional (can be disabled)
      - NAT Gateway is a major cost driver (~$32/month)
      - Consider using VPC endpoints to avoid NAT Gateway for AWS services
      - CloudFront has free tier (1TB transfer/month)
    SecurityBestPractices: |
      - All ECS tasks run in private subnet with no public IPs
      - Security groups follow least privilege principle
      - Secrets stored in AWS Secrets Manager
      - WAF protects CloudFront distribution
      - Cognito handles authentication
      - Private VPC endpoints for internal API access
    Deployment: |
      - Deploy this template in a single region
      - Update Docker images in ECR before scaling ECS services
      - Configure Cognito user pool after deployment
      - For production, enable multi-AZ and increase instance sizes

Parameters:
  # Project Configuration
  ProjectName:
    Type: String
    Default: fastapi-react-app
    Description: Name of the project (used for resource naming and tagging)
    AllowedPattern: ^[a-z0-9-]+$
    ConstraintDescription: Must contain only lowercase letters, numbers, and hyphens

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

  Owner:
    Type: String
    Default: devteam
    Description: Owner/team responsible for this stack

  # Network Configuration
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    AllowedPattern: ^(10\.|172\.(1[6-9]|2[0-9]|3[0-1])\.|192\.168\.).*

  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet

  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet

  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone for subnets (single AZ for cost efficiency)

  # ECS Configuration
  BackendCPU:
    Type: String
    Default: '256'
    AllowedValues: ['256', '512', '1024', '2048']
    Description: CPU units for Backend service (256 = 0.25 vCPU)

  BackendMemory:
    Type: String
    Default: '512'
    AllowedValues: ['512', '1024', '2048', '4096']
    Description: Memory (MB) for Backend service

  AnalyticsCPU:
    Type: String
    Default: '256'
    AllowedValues: ['256', '512', '1024', '2048']
    Description: CPU units for Analytics service

  AnalyticsMemory:
    Type: String
    Default: '512'
    AllowedValues: ['512', '1024', '2048', '4096']
    Description: Memory (MB) for Analytics service

  BackendDesiredCount:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 4
    Description: Desired number of Backend tasks

  AnalyticsDesiredCount:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 4
    Description: Desired number of Analytics tasks

  # Optional Services
  EnableRDS:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable RDS PostgreSQL database

  EnableElastiCache:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable ElastiCache Redis cluster

  EnableBedrock:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable Amazon Bedrock access for Analytics service

  EnableDevUser:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Create IAM user with programmatic access for local development

  # Database Configuration
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
    Description: RDS instance class (only used if EnableRDS is true)

  DBName:
    Type: String
    Default: appdb
    Description: Database name
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$

  DBUsername:
    Type: String
    Default: dbadmin
    Description: Database master username
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$

  # Domain & SSL
  CustomDomainName:
    Type: String
    Default: ''
    Description: Optional custom domain name for CloudFront (leave empty to skip)

  ACMCertificateArn:
    Type: String
    Default: ''
    Description: Optional ACM certificate ARN for custom domain (must be in us-east-1 for CloudFront)

Conditions:
  HasRDS: !Equals [!Ref EnableRDS, 'true']
  HasElastiCache: !Equals [!Ref EnableElastiCache, 'true']
  HasBedrock: !Equals [!Ref EnableBedrock, 'true']
  HasDevUser: !Equals [!Ref EnableDevUser, 'true']
  HasCustomDomain: !Not [!Equals [!Ref CustomDomainName, '']]
  HasACMCertificate: !Not [!Equals [!Ref ACMCertificateArn, '']]

Resources:
  # ========================================
  # VPC and Network Resources
  # ========================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw
        - Key: Project
          Value: !Ref ProjectName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet
        - Key: Project
          Value: !Ref ProjectName

  # NAT Gateway for private subnet internet access
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-nat-eip
        - Key: Project
          Value: !Ref ProjectName

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-nat
        - Key: Project
          Value: !Ref ProjectName

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-rt
        - Key: Project
          Value: !Ref ProjectName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-rt
        - Key: Project
          Value: !Ref ProjectName

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # ========================================
  # Security Groups
  # ========================================
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-alb-sg
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb-sg
        - Key: Project
          Value: !Ref ProjectName

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-ecs-sg
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow traffic from ALB
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref VPCEndpointSecurityGroup
          Description: Allow traffic from VPC Endpoint
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-sg
        - Key: Project
          Value: !Ref ProjectName

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasRDS
    Properties:
      GroupName: !Sub ${ProjectName}-rds-sg
      GroupDescription: Security group for RDS instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: Allow PostgreSQL from ECS
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Allow PostgreSQL from Lambda
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rds-sg
        - Key: Project
          Value: !Ref ProjectName

  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasElastiCache
    Properties:
      GroupName: !Sub ${ProjectName}-elasticache-sg
      GroupDescription: Security group for ElastiCache
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: Allow Redis from ECS
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Allow Redis from Lambda
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-elasticache-sg
        - Key: Project
          Value: !Ref ProjectName

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-lambda-sg
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-lambda-sg
        - Key: Project
          Value: !Ref ProjectName

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-vpce-sg
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Allow HTTPS from Lambda
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: Allow HTTPS from ECS
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpce-sg
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # S3 Bucket for Frontend
  # ========================================
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-frontend-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${FrontendBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  # ========================================
  # CloudFront Distribution with WAF
  # ========================================
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${ProjectName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub ${ProjectName}-waf
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSetMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub ${ProjectName}-waf-metric
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOAC
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        WebACLId: !GetAtt WAFWebACL.Arn
        Aliases: !If
          - HasCustomDomain
          - [!Ref CustomDomainName]
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - HasACMCertificate
          - AcmCertificateArn: !Ref ACMCertificateArn
            MinimumProtocolVersion: TLSv1.2_2021
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # Cognito User Pool
  # ========================================
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UserPoolTags:
        Project: !Ref ProjectName
        Environment: !Ref Environment

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ProjectName}-app-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days

  # ========================================
  # ECR Repositories
  # ========================================
  BackendECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}-backend
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  AnalyticsECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}-analytics
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # IAM Roles
  # ========================================
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref DBSecret
                  - !Ref AppSecret
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt DynamoDBTable.Arn
                  - !Sub ${DynamoDBTable.Arn}/index/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub ${DataBucket.Arn}/*
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt TaskQueue.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DBSecret
                  - !Ref AppSecret
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ProjectName}*
              - !If
                - HasBedrock
                - Effect: Allow
                  Action:
                    - bedrock:InvokeModel
                    - bedrock:InvokeModelWithResponseStream
                  Resource:
                    - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/*
                - !Ref AWS::NoValue
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt TaskQueue.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref StepFunctionsStateMachine
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}*
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-stepfunctions-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt WorkerLambdaFunction.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TaskQueue.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # Application Load Balancer
  # ========================================
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb
        - Key: Project
          Value: !Ref ProjectName

  ALBTargetGroupBackend:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-backend-tg
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  ALBTargetGroupAnalytics:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-analytics-tg
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            ContentType: application/json
            MessageBody: '{"error": "Not Found"}'

  ALBListenerRuleBackend:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /platform/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupBackend

  ALBListenerRuleAnalytics:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /analytics/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupAnalytics

  # ========================================
  # ECS Cluster and Services
  # ========================================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-backend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref BackendCPU
      Memory: !Ref BackendMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackendECRRepository}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DYNAMODB_TABLE
              Value: !Ref DynamoDBTable
            - Name: SQS_QUEUE_URL
              Value: !Ref TaskQueue
            - Name: SNS_TOPIC_ARN
              Value: !Ref NotificationTopic
          Secrets:
            - Name: DB_HOST
              ValueFrom: !Sub "${DBSecret.Arn}:SecretString:host::"
            - Name: DB_NAME
              ValueFrom: !Sub "${DBSecret.Arn}:SecretString:dbname::"
            - Name: DB_USERNAME
              ValueFrom: !Sub "${DBSecret.Arn}:SecretString:username::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${DBSecret.Arn}:SecretString:password::"
            - Name: API_KEY
              ValueFrom: !Sub "${AppSecret.Arn}:SecretString:api_key::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  AnalyticsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-analytics
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref AnalyticsCPU
      Memory: !Ref AnalyticsMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: analytics
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AnalyticsECRRepository}:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DYNAMODB_TABLE
              Value: !Ref DynamoDBTable
            - Name: ENABLE_BEDROCK
              Value: !Ref EnableBedrock
          Secrets:
            - Name: API_KEY
              ValueFrom: !Sub "${AppSecret.Arn}:SecretString:api_key::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AnalyticsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: analytics
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  BackendService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerRuleBackend
    Properties:
      ServiceName: !Sub ${ProjectName}-backend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: !Ref BackendDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !Ref ALBTargetGroupBackend
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  AnalyticsService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerRuleAnalytics
    Properties:
      ServiceName: !Sub ${ProjectName}-analytics-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AnalyticsTaskDefinition
      DesiredCount: !Ref AnalyticsDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: analytics
          ContainerPort: 8000
          TargetGroupArn: !Ref ALBTargetGroupAnalytics
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # CloudWatch Log Groups
  # ========================================
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-backend
      RetentionInDays: 7

  AnalyticsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-analytics
      RetentionInDays: 7

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProjectName}-worker
      RetentionInDays: 7

  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/stepfunctions/${ProjectName}
      RetentionInDays: 7

  # ========================================
  # API Gateway
  # ========================================
  ApiGatewayVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Sub ${ProjectName}-vpclink
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref ALBSecurityGroup

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${ProjectName}-api
      ProtocolType: HTTP
      Description: API Gateway for FastAPI services
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - '*'
        MaxAge: 300

  ApiGatewayAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      Name: CognitoAuthorizer
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClient
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Ref ALBListener
      IntegrationMethod: ANY
      ConnectionType: VPC_LINK
      ConnectionId: !Ref ApiGatewayVpcLink
      PayloadFormatVersion: '1.0'

  BackendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: ANY /platform/{proxy+}
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Target: !Sub integrations/${ApiGatewayIntegration}

  AnalyticsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: ANY /analytics/{proxy+}
      AuthorizationType: JWT
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Target: !Sub integrations/${ApiGatewayIntegration}

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: $context.requestId

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${ProjectName}
      RetentionInDays: 7

  # ========================================
  # VPC Endpoints for Internal Access
  # ========================================
  VPCEndpointALB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.vpce.${AWS::Region}.vpce-svc-placeholder
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # ========================================
  # RDS PostgreSQL (Optional)
  # ========================================
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: HasRDS
    Properties:
      DBSubnetGroupName: !Sub ${ProjectName}-db-subnet-group
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Condition: HasRDS
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub ${ProjectName}-db
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: '15.4'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 20
      StorageType: gp3
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:password}}'
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 03:00-04:00
      PreferredMaintenanceWindow: mon:04:00-mon:05:00
      EnableCloudwatchLogsExports:
        - postgresql
      StorageEncrypted: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # ElastiCache Redis (Optional)
  # ========================================
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Condition: HasElastiCache
    Properties:
      CacheSubnetGroupName: !Sub ${ProjectName}-cache-subnet-group
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref PrivateSubnet

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Condition: HasElastiCache
    Properties:
      CacheClusterId: !Sub ${ProjectName}-cache
      Engine: redis
      CacheNodeType: cache.t3.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      PreferredMaintenanceWindow: mon:05:00-mon:06:00
      SnapshotRetentionLimit: 5
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # DynamoDB Table
  # ========================================
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub ${ProjectName}-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # SQS Queue
  # ========================================
  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}-task-queue
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}-dlq
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # SNS Topic
  # ========================================
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ProjectName}-notifications
      DisplayName: Application Notifications
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # Lambda Function
  # ========================================
  WorkerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-worker
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTable
          SQS_QUEUE_URL: !Ref TaskQueue
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def lambda_handler(event, context):
              print(f"Event: {json.dumps(event)}")
              
              # Placeholder function - implement your logic here
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Worker function executed',
                      'event': event
                  })
              }
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # Step Functions State Machine
  # ========================================
  StepFunctionsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${ProjectName}-workflow
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Workflow for processing tasks",
          "StartAt": "InvokeLambda",
          "States": {
            "InvokeLambda": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${WorkerLambdaFunction.Arn}",
                "Payload": {
                  "input.$": "$"
                }
              },
              "Next": "CheckResult",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ]
            },
            "CheckResult": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Payload.statusCode",
                  "NumericEquals": 200,
                  "Next": "Success"
                }
              ],
              "Default": "Failed"
            },
            "Success": {
              "Type": "Succeed"
            },
            "Failed": {
              "Type": "Fail",
              "Error": "WorkflowFailed",
              "Cause": "Lambda function returned error"
            }
          }
        }
      LoggingConfiguration:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      TracingConfiguration:
        Enabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # Secrets Manager
  # ========================================
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${ProjectName}/db/credentials
      Description: Database credentials
      GenerateSecretString:
        SecretStringTemplate: !Sub |
          {
            "username": "${DBUsername}",
            "dbname": "${DBName}",
            "host": "${RDSInstance.Endpoint.Address}",
            "port": "5432"
          }
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  AppSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${ProjectName}/app/credentials
      Description: Application API keys and secrets
      GenerateSecretString:
        SecretStringTemplate: '{"app": "secret"}'
        GenerateStringKey: api_key
        PasswordLength: 64
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # S3 Bucket for Data
  # ========================================
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-data-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # Dev IAM User (Optional)
  # ========================================
  DevUser:
    Type: AWS::IAM::User
    Condition: HasDevUser
    Properties:
      UserName: !Sub ${ProjectName}-dev-user
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  DevUserAccessKey:
    Type: AWS::IAM::AccessKey
    Condition: HasDevUser
    Properties:
      UserName: !Ref DevUser

  DevUserPolicy:
    Type: AWS::IAM::UserPolicy
    Condition: HasDevUser
    Properties:
      UserName: !Ref DevUser
      PolicyName: DevUserPermissions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !GetAtt DynamoDBTable.Arn
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !GetAtt DataBucket.Arn
              - !Sub ${DataBucket.Arn}/*
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Resource: !GetAtt TaskQueue.Arn
          - Effect: Allow
            Action:
              - states:StartExecution
              - states:DescribeExecution
            Resource: !Ref StepFunctionsStateMachine
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref AppSecret
          - Effect: Allow
            Action:
              - cognito-idp:InitiateAuth
              - cognito-idp:SignUp
              - cognito-idp:ConfirmSignUp
            Resource: !GetAtt CognitoUserPool.Arn
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:GetLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ProjectName}*

  # ========================================
  # CloudWatch Alarms
  # ========================================
  BackendCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProjectName}-backend-cpu-high
      AlarmDescription: Backend service CPU utilization is too high
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt BackendService.Name
      AlarmActions:
        - !Ref NotificationTopic

  AnalyticsCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProjectName}-analytics-cpu-high
      AlarmDescription: Analytics service CPU utilization is too high
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt AnalyticsService.Name
      AlarmActions:
        - !Ref NotificationTopic

  ApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProjectName}-api-5xx-errors
      AlarmDescription: API Gateway 5xx errors
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiId
          Value: !Ref HttpApi
      AlarmActions:
        - !Ref NotificationTopic

Outputs:
  # Frontend
  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}

  S3WebsiteURL:
    Description: S3 Bucket Website URL
    Value: !GetAtt FrontendBucket.WebsiteURL

  FrontendBucketName:
    Description: Frontend S3 Bucket Name
    Value: !Ref FrontendBucket

  # API Gateway
  ApiGatewayURL:
    Description: API Gateway HTTP API URL
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com

  # Cognito
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool

  CognitoUserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt CognitoUserPool.Arn

  CognitoClientId:
    Description: Cognito App Client ID
    Value: !Ref CognitoUserPoolClient

  # Load Balancer
  ALBPublicDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ALBArn:
    Description: Application Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer

  # VPC Endpoint
  VPCEndpointDNS:
    Description: VPC Endpoint DNS Name for internal ALB access
    Value: !Join
      - ','
      - !GetAtt VPCEndpointALB.DnsEntries

  # ECR
  BackendECRRepositoryURI:
    Description: Backend ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackendECRRepository}

  AnalyticsECRRepositoryURI:
    Description: Analytics ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AnalyticsECRRepository}

  # ECS
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster

  BackendServiceName:
    Description: Backend ECS Service Name
    Value: !GetAtt BackendService.Name

  AnalyticsServiceName:
    Description: Analytics ECS Service Name
    Value: !GetAtt AnalyticsService.Name

  # Database
  RDSInstanceEndpoint:
    Description: RDS Instance Endpoint
    Condition: HasRDS
    Value: !GetAtt RDSInstance.Endpoint.Address

  ElastiCacheEndpoint:
    Description: ElastiCache Redis Endpoint
    Condition: HasElastiCache
    Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address

  # DynamoDB
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref DynamoDBTable

  # SQS/SNS
  TaskQueueURL:
    Description: SQS Task Queue URL
    Value: !Ref TaskQueue

  NotificationTopicArn:
    Description: SNS Notification Topic ARN
    Value: !Ref NotificationTopic

  # Step Functions
  StepFunctionsArn:
    Description: Step Functions State Machine ARN
    Value: !Ref StepFunctionsStateMachine

  # Lambda
  WorkerLambdaArn:
    Description: Worker Lambda Function ARN
    Value: !GetAtt WorkerLambdaFunction.Arn

  # Secrets
  DBSecretArn:
    Description: Database Secret ARN
    Value: !Ref DBSecret

  AppSecretArn:
    Description: Application Secret ARN
    Value: !Ref AppSecret

  # S3
  DataBucketName:
    Description: Data S3 Bucket Name
    Value: !Ref DataBucket

  # Dev User (if enabled)
  DevUserAccessKeyId:
    Description: Dev User Access Key ID (WARNING - Store securely!)
    Condition: HasDevUser
    Value: !Ref DevUserAccessKey

  DevUserSecretAccessKey:
    Description: Dev User Secret Access Key (WARNING - Store securely!)
    Condition: HasDevUser
    Value: !GetAtt DevUserAccessKey.SecretAccessKey

  # VPC
  VpcId:
    Description: VPC ID
    Value: !Ref VPC

  PrivateSubnetId:
    Description: Private Subnet ID
    Value: !Ref PrivateSubnet

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet